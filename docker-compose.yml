# GhostChain Workspace Docker Compose Configuration
# Multi-service deployment with ghostd and walletd
version: '3.8'

services:
  # GhostChain Blockchain Daemon
  ghostd:
    build:
      context: .
      dockerfile: Dockerfile
      target: ghostd
    container_name: ghostchain-ghostd
    restart: unless-stopped
    ports:
      - "8545:8545"   # Main RPC port
      - "8547:8547"   # API port
      - "8546:8546"   # P2P discovery port
      - "8549:8549"   # QUIC transport port
    volumes:
      - ghostd-data:/opt/ghostchain/data
      - ghostd-logs:/opt/ghostchain/logs
      - ghostd-config:/opt/ghostchain/config
    environment:
      - RUST_LOG=info
      - GHOSTCHAIN_CHAIN_ID=ghostchain-docker
      - GHOSTCHAIN_DATA_DIR=/opt/ghostchain/data
      - GHOSTCHAIN_LOG_LEVEL=info
    command: [
      "ghostd", "start",
      "--bind-address", "0.0.0.0:8545",
      "--enable-quic",
      "--enable-mining"
    ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8547/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - ghostchain-network

  # GhostChain Wallet Daemon
  walletd:
    build:
      context: .
      dockerfile: Dockerfile
      target: walletd
    container_name: ghostchain-walletd
    restart: unless-stopped
    ports:
      - "8548:8548"   # Wallet API port
      - "8550:8550"   # Wallet QUIC port
    volumes:
      - walletd-data:/opt/ghostchain/wallets
      - walletd-identities:/opt/ghostchain/identities
      - walletd-keys:/opt/ghostchain/keys
      - walletd-config:/opt/ghostchain/config
      - walletd-logs:/opt/ghostchain/logs
    environment:
      - RUST_LOG=info
      - GHOSTCHAIN_GHOSTD_ENDPOINT=http://ghostd:8547
      - GHOSTCHAIN_DATA_DIR=/opt/ghostchain
    command: [
      "walletd", "start",
      "--bind-address", "0.0.0.0:8548",
      "--enable-quic"
    ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8548/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      ghostd:
        condition: service_healthy
    networks:
      - ghostchain-network

  # Testnet Configuration (for development)
  ghostd-testnet:
    build:
      context: .
      dockerfile: Dockerfile
      target: ghostd
    container_name: ghostchain-ghostd-testnet
    restart: unless-stopped
    ports:
      - "18545:8545"   # Testnet RPC port
      - "18547:8547"   # Testnet API port
      - "18546:8546"   # Testnet P2P port
      - "18549:8549"   # Testnet QUIC port
    volumes:
      - ghostd-testnet-data:/opt/ghostchain/data
      - ghostd-testnet-logs:/opt/ghostchain/logs
      - ghostd-testnet-config:/opt/ghostchain/config
    environment:
      - RUST_LOG=debug
      - GHOSTCHAIN_CHAIN_ID=ghostchain-testnet
      - GHOSTCHAIN_DATA_DIR=/opt/ghostchain/data
      - GHOSTCHAIN_LOG_LEVEL=debug
    command: [
      "ghostd", "start",
      "--bind-address", "0.0.0.0:8545",
      "--enable-quic",
      "--enable-mining",
      "--testnet"
    ]
    networks:
      - ghostchain-testnet-network

  # Testnet Wallet
  walletd-testnet:
    build:
      context: .
      dockerfile: Dockerfile
      target: walletd
    container_name: ghostchain-walletd-testnet
    restart: unless-stopped
    ports:
      - "18548:8548"   # Testnet wallet API
      - "18550:8550"   # Testnet wallet QUIC
    volumes:
      - walletd-testnet-data:/opt/ghostchain/wallets
      - walletd-testnet-identities:/opt/ghostchain/identities
      - walletd-testnet-keys:/opt/ghostchain/keys
      - walletd-testnet-config:/opt/ghostchain/config
      - walletd-testnet-logs:/opt/ghostchain/logs
    environment:
      - RUST_LOG=debug
      - GHOSTCHAIN_GHOSTD_ENDPOINT=http://ghostd-testnet:8547
      - GHOSTCHAIN_DATA_DIR=/opt/ghostchain
    command: [
      "walletd", "start",
      "--bind-address", "0.0.0.0:8548",
      "--enable-quic",
      "--testnet"
    ]
    depends_on:
      - ghostd-testnet
    networks:
      - ghostchain-testnet-network

  # Redis (for caching and performance)
  redis:
    image: redis:7-alpine
    container_name: ghostchain-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - ghostchain-network
      - ghostchain-testnet-network

  # PostgreSQL (for analytics and indexing)
  postgres:
    image: postgres:15-alpine
    container_name: ghostchain-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ghostchain
      - POSTGRES_USER=ghostchain
      - POSTGRES_PASSWORD=ghostchain_secure_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - ghostchain-network

  # Nginx (reverse proxy and load balancer)
  nginx:
    image: nginx:alpine
    container_name: ghostchain-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - nginx-certs:/etc/nginx/certs
    depends_on:
      ghostd:
        condition: service_healthy
      walletd:
        condition: service_healthy
    networks:
      - ghostchain-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ghostchain-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ghostchain-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ghostchain-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ghostchain_admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - ghostchain-network

volumes:
  # Main network volumes
  ghostd-data:
  ghostd-logs:
  ghostd-config:
  walletd-data:
  walletd-identities:
  walletd-keys:
  walletd-config:
  walletd-logs:
  
  # Testnet volumes
  ghostd-testnet-data:
  ghostd-testnet-logs:
  ghostd-testnet-config:
  walletd-testnet-data:
  walletd-testnet-identities:
  walletd-testnet-keys:
  walletd-testnet-config:
  walletd-testnet-logs:
  
  # Infrastructure volumes
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  nginx-certs:

networks:
  ghostchain-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  ghostchain-testnet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16