# NGINX Configuration for GhostChain
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=rpc:10m rate=100r/s;

    # Upstream definitions
    upstream ghostd_backend {
        server ghostd:8545 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream walletd_backend {
        server walletd:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream zns_backend {
        server zns-resolver:8548 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream grafana_backend {
        server grafana:3000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Default server block
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Redirect to HTTPS (when SSL is configured)
        # return 301 https://$server_name$request_uri;

        # For now, serve content directly
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>GhostChain Network</title>
    <meta charset="utf-8">
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 0; padding: 20px; background: #0a0a0a; color: #fff; }
        .container { max-width: 800px; margin: 0 auto; text-align: center; }
        .logo { font-size: 3em; font-weight: bold; color: #00ff88; margin-bottom: 20px; }
        .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-top: 40px; }
        .service { background: #1a1a1a; padding: 20px; border-radius: 8px; }
        .service h3 { color: #00ff88; margin-top: 0; }
        .service a { color: #fff; text-decoration: none; }
        .service a:hover { color: #00ff88; }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üëª GhostChain</div>
        <p>Pure Zig Blockchain ‚Ä¢ IPv6 ‚Ä¢ QUIC ‚Ä¢ Web5</p>
        <div class="services">
            <div class="service">
                <h3>üîó Blockchain API</h3>
                <p><a href="/api/blockchain">JSON-RPC Endpoint</a></p>
                <p>Port: 8545</p>
            </div>
            <div class="service">
                <h3>üíº Wallet Service</h3>
                <p><a href="/api/wallet">Wallet Management</a></p>
                <p>Port: 3001</p>
            </div>
            <div class="service">
                <h3>üåç Name Service</h3>
                <p><a href="/api/zns">.ghost Domains</a></p>
                <p>Port: 8548</p>
            </div>
            <div class="service">
                <h3>üìä Monitoring</h3>
                <p><a href="/grafana">Grafana Dashboard</a></p>
                <p>Port: 3000</p>
            </div>
        </div>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }
    }

    # Blockchain RPC API
    server {
        listen 80;
        listen [::]:80;
        server_name api.ghostchain.local rpc.ghostchain.local;

        location / {
            limit_req zone=rpc burst=20 nodelay;
            
            proxy_pass http://ghostd_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
            
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }
    }

    # Wallet API
    server {
        listen 80;
        listen [::]:80;
        server_name wallet.ghostchain.local;

        location / {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://walletd_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Security headers
            add_header X-Content-Type-Options nosniff;
            add_header X-Frame-Options DENY;
            add_header X-XSS-Protection "1; mode=block";
        }
    }

    # ZNS API
    server {
        listen 80;
        listen [::]:80;
        server_name zns.ghostchain.local names.ghostchain.local;

        location / {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://zns_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type" always;
        }
    }

    # Grafana Dashboard
    server {
        listen 80;
        listen [::]:80;
        server_name grafana.ghostchain.local monitoring.ghostchain.local;

        location / {
            proxy_pass http://grafana_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Route to services by path
    server {
        listen 80;
        listen [::]:80;
        server_name ghostchain.local localhost;

        # Blockchain API
        location /api/blockchain {
            rewrite ^/api/blockchain(.*)$ $1 break;
            proxy_pass http://ghostd_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Wallet API
        location /api/wallet {
            rewrite ^/api/wallet(.*)$ $1 break;
            proxy_pass http://walletd_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ZNS API
        location /api/zns {
            rewrite ^/api/zns(.*)$ $1 break;
            proxy_pass http://zns_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Grafana
        location /grafana {
            rewrite ^/grafana(.*)$ $1 break;
            proxy_pass http://grafana_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Default location serves the main page
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>GhostChain Network Node</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 0; padding: 20px; background: #0a0a0a; color: #fff; }
        .container { max-width: 1000px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 40px; }
        .logo { font-size: 4em; font-weight: bold; color: #00ff88; margin-bottom: 10px; }
        .tagline { font-size: 1.2em; color: #888; }
        .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 40px 0; }
        .service { background: #1a1a1a; padding: 20px; border-radius: 8px; border: 1px solid #333; }
        .service h3 { color: #00ff88; margin-top: 0; font-size: 1.4em; }
        .service p { margin: 10px 0; color: #ccc; }
        .service a { color: #00ff88; text-decoration: none; font-weight: 500; }
        .service a:hover { color: #fff; text-decoration: underline; }
        .status { background: #1a1a1a; padding: 20px; border-radius: 8px; margin-top: 20px; }
        .status h3 { color: #00ff88; margin-top: 0; }
        .metric { display: inline-block; margin: 10px 20px 10px 0; }
        .metric-value { font-size: 1.5em; font-weight: bold; color: #00ff88; }
        .metric-label { display: block; font-size: 0.9em; color: #888; }
        .footer { text-align: center; margin-top: 40px; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">üëª GhostChain</div>
            <div class="tagline">Pure Zig Blockchain ‚Ä¢ IPv6 ‚Ä¢ QUIC ‚Ä¢ Web5</div>
        </div>
        
        <div class="services">
            <div class="service">
                <h3>üîó Blockchain API</h3>
                <p>JSON-RPC 2.0 compatible blockchain interface</p>
                <p><strong>Endpoint:</strong> <a href="/api/blockchain/health">/api/blockchain</a></p>
                <p><strong>Port:</strong> 8545</p>
                <p><strong>Features:</strong> Transactions, Blocks, Smart Contracts</p>
            </div>
            
            <div class="service">
                <h3>üíº Wallet Service</h3>
                <p>Secure multi-signature wallet management</p>
                <p><strong>Endpoint:</strong> <a href="/api/wallet/health">/api/wallet</a></p>
                <p><strong>Port:</strong> 3001</p>
                <p><strong>Features:</strong> Key Management, Transaction Signing</p>
            </div>
            
            <div class="service">
                <h3>üåç Name Service</h3>
                <p>Decentralized .ghost domain resolution</p>
                <p><strong>Endpoint:</strong> <a href="/api/zns/health">/api/zns</a></p>
                <p><strong>Port:</strong> 8548</p>
                <p><strong>Features:</strong> Domain Registration, DNS Resolution</p>
            </div>
            
            <div class="service">
                <h3>üìä Monitoring</h3>
                <p>Real-time network and node metrics</p>
                <p><strong>Dashboard:</strong> <a href="/grafana">Grafana</a></p>
                <p><strong>Port:</strong> 3000</p>
                <p><strong>Features:</strong> Performance Metrics, Alerts</p>
            </div>
        </div>
        
        <div class="status">
            <h3>üìä Node Status</h3>
            <div class="metric">
                <span class="metric-value" id="block-height">Loading...</span>
                <span class="metric-label">Latest Block</span>
            </div>
            <div class="metric">
                <span class="metric-value" id="peer-count">Loading...</span>
                <span class="metric-label">Connected Peers</span>
            </div>
            <div class="metric">
                <span class="metric-value" id="network-status">Loading...</span>
                <span class="metric-label">Network Status</span>
            </div>
        </div>
        
        <div class="footer">
            <p>GhostChain Network Node ‚Ä¢ Powered by Pure Zig ‚Ä¢ Built for the Future</p>
        </div>
    </div>
    
    <script>
        // Update node status
        async function updateStatus() {
            try {
                const response = await fetch("/api/blockchain/health");
                const data = await response.json();
                
                document.getElementById("block-height").textContent = data.latest_block || "0";
                document.getElementById("peer-count").textContent = data.peers_connected || "0";
                document.getElementById("network-status").textContent = response.ok ? "Online" : "Offline";
            } catch (error) {
                document.getElementById("network-status").textContent = "Offline";
            }
        }
        
        // Update every 30 seconds
        updateStatus();
        setInterval(updateStatus, 30000);
    </script>
</body>
</html>';
            add_header Content-Type text/html;
        }
    }
}