syntax = "proto3";

package ghostchain.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Core GhostChain blockchain service
service GhostChainService {
  // Blockchain operations
  rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);
  rpc GetLatestBlock(google.protobuf.Empty) returns (GetBlockResponse);
  rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
  
  // Smart contract operations
  rpc DeployContract(DeployContractRequest) returns (DeployContractResponse);
  rpc CallContract(CallContractRequest) returns (CallContractResponse);
  rpc GetContractInfo(GetContractInfoRequest) returns (GetContractInfoResponse);
  
  // ZNS (Name Service) operations
  rpc ResolveDomain(ResolveDomainRequest) returns (ResolveDomainResponse);
  rpc RegisterDomain(RegisterDomainRequest) returns (RegisterDomainResponse);
  rpc UpdateDomainRecords(UpdateDomainRecordsRequest) returns (UpdateDomainRecordsResponse);
  
  // RealID operations
  rpc CreateIdentity(CreateIdentityRequest) returns (CreateIdentityResponse);
  rpc VerifyIdentity(VerifyIdentityRequest) returns (VerifyIdentityResponse);
  rpc IssueCredential(IssueCredentialRequest) returns (IssueCredentialResponse);
  
  // Network and consensus
  rpc GetNetworkInfo(google.protobuf.Empty) returns (GetNetworkInfoResponse);
  rpc GetPeers(google.protobuf.Empty) returns (GetPeersResponse);
  rpc GetValidators(google.protobuf.Empty) returns (GetValidatorsResponse);
  
  // Streaming operations
  rpc SubscribeBlocks(SubscribeBlocksRequest) returns (stream BlockEvent);
  rpc SubscribeTransactions(SubscribeTransactionsRequest) returns (stream TransactionEvent);
  rpc SubscribeDomainChanges(SubscribeDomainChangesRequest) returns (stream DomainChangeEvent);
}

// Wallet management service
service WalletService {
  // Authentication
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);
  
  // Wallet management
  rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);
  rpc ListWallets(ListWalletsRequest) returns (ListWalletsResponse);
  rpc GetWallet(GetWalletRequest) returns (GetWalletResponse);
  rpc DeleteWallet(DeleteWalletRequest) returns (DeleteWalletResponse);
  
  // Account management
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse);
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);
  rpc GetAccountBalance(GetAccountBalanceRequest) returns (GetAccountBalanceResponse);
  
  // Transaction operations
  rpc SignTransaction(SignTransactionRequest) returns (SignTransactionResponse);
  rpc SendTransaction(SendTransactionRequest) returns (SendTransactionResponse);
  rpc GetTransactionHistory(GetTransactionHistoryRequest) returns (GetTransactionHistoryResponse);
  
  // Key management
  rpc GenerateKeyPair(GenerateKeyPairRequest) returns (GenerateKeyPairResponse);
  rpc ImportPrivateKey(ImportPrivateKeyRequest) returns (ImportPrivateKeyResponse);
  rpc ExportPublicKey(ExportPublicKeyRequest) returns (ExportPublicKeyResponse);
  
  // Multi-signature
  rpc CreateMultiSigWallet(CreateMultiSigWalletRequest) returns (CreateMultiSigWalletResponse);
  rpc SignMultiSigTransaction(SignMultiSigTransactionRequest) returns (SignMultiSigTransactionResponse);
}

// Data structures

message Block {
  uint64 index = 1;
  string hash = 2;
  string previous_hash = 3;
  string merkle_root = 4;
  google.protobuf.Timestamp timestamp = 5;
  uint64 nonce = 6;
  repeated Transaction transactions = 7;
  string validator = 8;
  uint64 gas_limit = 9;
  uint64 gas_used = 10;
}

message Transaction {
  string hash = 1;
  string from = 2;
  string to = 3;
  uint64 amount = 4;
  uint64 fee = 5;
  uint64 nonce = 6;
  bytes data = 7;
  string signature = 8;
  google.protobuf.Timestamp timestamp = 9;
  TransactionStatus status = 10;
  uint64 gas_limit = 11;
  uint64 gas_used = 12;
}

enum TransactionStatus {
  TRANSACTION_STATUS_UNSPECIFIED = 0;
  TRANSACTION_STATUS_PENDING = 1;
  TRANSACTION_STATUS_CONFIRMED = 2;
  TRANSACTION_STATUS_FAILED = 3;
}

message Account {
  string id = 1;
  string name = 2;
  string address = 3;
  uint64 balance = 4;
  uint64 nonce = 5;
  KeyType key_type = 6;
  google.protobuf.Timestamp created_at = 7;
}

enum KeyType {
  KEY_TYPE_UNSPECIFIED = 0;
  KEY_TYPE_ED25519 = 1;
  KEY_TYPE_SECP256K1 = 2;
}

message Wallet {
  string id = 1;
  string name = 2;
  string primary_address = 3;
  repeated Account accounts = 4;
  google.protobuf.Timestamp created_at = 5;
  bool encrypted = 6;
}

message SmartContract {
  string address = 1;
  string deployer = 2;
  bytes bytecode = 3;
  ContractType contract_type = 4;
  google.protobuf.Timestamp deployed_at = 5;
  uint64 gas_used = 6;
  string transaction_hash = 7;
}

enum ContractType {
  CONTRACT_TYPE_UNSPECIFIED = 0;
  CONTRACT_TYPE_ZVM_NATIVE = 1;
  CONTRACT_TYPE_EVM_COMPATIBLE = 2;
  CONTRACT_TYPE_WASM = 3;
}

message DomainRecord {
  string domain = 1;
  RecordType record_type = 2;
  string value = 3;
  uint32 ttl = 4;
  string owner = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp expires_at = 7;
}

enum RecordType {
  RECORD_TYPE_UNSPECIFIED = 0;
  RECORD_TYPE_A = 1;
  RECORD_TYPE_AAAA = 2;
  RECORD_TYPE_CNAME = 3;
  RECORD_TYPE_TXT = 4;
  RECORD_TYPE_MX = 5;
  RECORD_TYPE_GHOST = 6;
  RECORD_TYPE_WALLET = 7;
  RECORD_TYPE_CONTRACT = 8;
}

message Identity {
  string did = 1;
  string username = 2;
  string public_key = 3;
  bool verified = 4;
  repeated IdentityAttribute attributes = 5;
  repeated VerifiableCredential credentials = 6;
  google.protobuf.Timestamp created_at = 7;
}

message IdentityAttribute {
  string name = 1;
  string value = 2;
  bool verified = 3;
  string verifier = 4;
}

message VerifiableCredential {
  string id = 1;
  string issuer = 2;
  string subject = 3;
  CredentialType credential_type = 4;
  repeated Claim claims = 5;
  google.protobuf.Timestamp issued_at = 6;
  google.protobuf.Timestamp expires_at = 7;
  bool revoked = 8;
}

enum CredentialType {
  CREDENTIAL_TYPE_UNSPECIFIED = 0;
  CREDENTIAL_TYPE_IDENTITY_VERIFICATION = 1;
  CREDENTIAL_TYPE_AGE_VERIFICATION = 2;
  CREDENTIAL_TYPE_ADDRESS_VERIFICATION = 3;
  CREDENTIAL_TYPE_KYC = 4;
  CREDENTIAL_TYPE_CUSTOM = 5;
}

message Claim {
  string key = 1;
  string value = 2;
  float confidence = 3;
}

// Request/Response messages

// Blockchain operations
message GetBlockRequest {
  oneof identifier {
    uint64 block_number = 1;
    string block_hash = 2;
  }
}

message GetBlockResponse {
  Block block = 1;
  Error error = 2;
}

message SubmitTransactionRequest {
  Transaction transaction = 1;
}

message SubmitTransactionResponse {
  string transaction_hash = 1;
  bool success = 2;
  Error error = 3;
}

message GetTransactionRequest {
  string transaction_hash = 1;
}

message GetTransactionResponse {
  Transaction transaction = 1;
  Error error = 2;
}

message GetBalanceRequest {
  string address = 1;
  string token = 2; // Optional, defaults to GHOST
}

message GetBalanceResponse {
  uint64 balance = 1;
  string token = 2;
  Error error = 3;
}

// Smart contract operations
message DeployContractRequest {
  bytes bytecode = 1;
  bytes constructor_args = 2;
  string deployer = 3;
  uint64 gas_limit = 4;
  ContractType contract_type = 5;
}

message DeployContractResponse {
  string contract_address = 1;
  string transaction_hash = 2;
  uint64 gas_used = 3;
  bool success = 4;
  Error error = 5;
}

message CallContractRequest {
  string contract_address = 1;
  string function_selector = 2;
  bytes function_args = 3;
  string caller = 4;
  uint64 value = 5;
  uint64 gas_limit = 6;
}

message CallContractResponse {
  bytes return_data = 1;
  uint64 gas_used = 2;
  bool success = 3;
  repeated ContractLog logs = 4;
  Error error = 5;
}

message GetContractInfoRequest {
  string contract_address = 1;
}

message GetContractInfoResponse {
  SmartContract contract = 1;
  Error error = 2;
}

message ContractLog {
  string address = 1;
  repeated string topics = 2;
  bytes data = 3;
}

// ZNS operations
message ResolveDomainRequest {
  string domain = 1;
  repeated RecordType record_types = 2;
}

message ResolveDomainResponse {
  repeated DomainRecord records = 1;
  Error error = 2;
}

message RegisterDomainRequest {
  string domain = 1;
  string owner = 2;
  repeated DomainRecord initial_records = 3;
  uint64 registration_period_years = 4;
}

message RegisterDomainResponse {
  string transaction_hash = 1;
  bool success = 2;
  Error error = 3;
}

message UpdateDomainRecordsRequest {
  string domain = 1;
  repeated DomainRecord records = 2;
  string owner_signature = 3;
}

message UpdateDomainRecordsResponse {
  string transaction_hash = 1;
  bool success = 2;
  Error error = 3;
}

// RealID operations
message CreateIdentityRequest {
  string username = 1;
  string public_key = 2;
  repeated IdentityAttribute initial_attributes = 3;
}

message CreateIdentityResponse {
  Identity identity = 1;
  Error error = 2;
}

message VerifyIdentityRequest {
  string did = 1;
  string challenge = 2;
  string signature = 3;
}

message VerifyIdentityResponse {
  bool verified = 1;
  Error error = 2;
}

message IssueCredentialRequest {
  string issuer_did = 1;
  string subject_did = 2;
  CredentialType credential_type = 3;
  repeated Claim claims = 4;
  google.protobuf.Timestamp expires_at = 5;
}

message IssueCredentialResponse {
  VerifiableCredential credential = 1;
  Error error = 2;
}

// Network operations
message GetNetworkInfoResponse {
  string network_name = 1;
  string chain_id = 2;
  uint64 latest_block = 3;
  uint32 peer_count = 4;
  bool syncing = 5;
  string node_version = 6;
}

message GetPeersResponse {
  repeated Peer peers = 1;
}

message Peer {
  string id = 1;
  string address = 2;
  uint32 port = 3;
  bool connected = 4;
  google.protobuf.Timestamp last_seen = 5;
}

message GetValidatorsResponse {
  repeated Validator validators = 1;
}

message Validator {
  string address = 1;
  uint64 stake = 2;
  bool active = 3;
  uint32 reputation = 4;
}

// Streaming events
message SubscribeBlocksRequest {
  bool include_transactions = 1;
}

message BlockEvent {
  Block block = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message SubscribeTransactionsRequest {
  repeated string addresses = 1; // Filter by addresses
}

message TransactionEvent {
  Transaction transaction = 1;
  string event_type = 2; // "pending", "confirmed", "failed"
  google.protobuf.Timestamp timestamp = 3;
}

message SubscribeDomainChangesRequest {
  repeated string domains = 1; // Filter by domains
}

message DomainChangeEvent {
  string domain = 1;
  string event_type = 2; // "registered", "updated", "transferred", "expired"
  DomainRecord record = 3;
  google.protobuf.Timestamp timestamp = 4;
}

// Wallet service messages
message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  bool success = 1;
  string session_token = 2;
  google.protobuf.Timestamp expires_at = 3;
  Error error = 4;
}

message LogoutRequest {
  string session_token = 1;
}

message LogoutResponse {
  bool success = 1;
}

message CreateWalletRequest {
  string name = 1;
  string password = 2;
  KeyType key_type = 3;
}

message CreateWalletResponse {
  Wallet wallet = 1;
  Error error = 2;
}

message ListWalletsRequest {
  string session_token = 1;
}

message ListWalletsResponse {
  repeated Wallet wallets = 1;
  Error error = 2;
}

message GetWalletRequest {
  string wallet_id = 1;
  string session_token = 2;
}

message GetWalletResponse {
  Wallet wallet = 1;
  Error error = 2;
}

message DeleteWalletRequest {
  string wallet_id = 1;
  string session_token = 2;
  string password = 3;
}

message DeleteWalletResponse {
  bool success = 1;
  Error error = 2;
}

message CreateAccountRequest {
  string wallet_id = 1;
  string account_name = 2;
  string session_token = 3;
}

message CreateAccountResponse {
  Account account = 1;
  Error error = 2;
}

message ListAccountsRequest {
  string wallet_id = 1;
  string session_token = 2;
}

message ListAccountsResponse {
  repeated Account accounts = 1;
  Error error = 2;
}

message GetAccountBalanceRequest {
  string wallet_id = 1;
  string account_id = 2;
  string token = 3; // Optional
  string session_token = 4;
}

message GetAccountBalanceResponse {
  uint64 balance = 1;
  string token = 2;
  Error error = 3;
}

message SignTransactionRequest {
  string wallet_id = 1;
  string account_id = 2;
  bytes transaction_data = 3;
  string session_token = 4;
}

message SignTransactionResponse {
  string signature = 1;
  Error error = 2;
}

message SendTransactionRequest {
  string wallet_id = 1;
  string account_id = 2;
  string to_address = 3;
  uint64 amount = 4;
  uint64 fee = 5;
  bytes data = 6;
  string session_token = 7;
}

message SendTransactionResponse {
  string transaction_hash = 1;
  Error error = 2;
}

message GetTransactionHistoryRequest {
  string wallet_id = 1;
  string account_id = 2;
  uint32 limit = 3;
  uint32 offset = 4;
  string session_token = 5;
}

message GetTransactionHistoryResponse {
  repeated Transaction transactions = 1;
  uint32 total_count = 2;
  Error error = 3;
}

message GenerateKeyPairRequest {
  KeyType key_type = 1;
  string session_token = 2;
}

message GenerateKeyPairResponse {
  string public_key = 1;
  string private_key = 2; // Only returned if explicitly requested
  Error error = 3;
}

message ImportPrivateKeyRequest {
  string wallet_id = 1;
  string private_key = 2;
  string account_name = 3;
  string session_token = 4;
}

message ImportPrivateKeyResponse {
  Account account = 1;
  Error error = 2;
}

message ExportPublicKeyRequest {
  string wallet_id = 1;
  string account_id = 2;
  string session_token = 3;
}

message ExportPublicKeyResponse {
  string public_key = 1;
  Error error = 2;
}

message CreateMultiSigWalletRequest {
  string name = 1;
  repeated string public_keys = 2;
  uint32 required_signatures = 3;
  string session_token = 4;
}

message CreateMultiSigWalletResponse {
  string wallet_id = 1;
  string multisig_address = 2;
  Error error = 3;
}

message SignMultiSigTransactionRequest {
  string wallet_id = 1;
  string multisig_address = 2;
  bytes transaction_data = 3;
  string session_token = 4;
}

message SignMultiSigTransactionResponse {
  string signature = 1;
  uint32 signatures_collected = 2;
  bool ready_to_broadcast = 3;
  Error error = 4;
}

// Common error structure
message Error {
  string code = 1;
  string message = 2;
  string details = 3;
}